import java.lang.reflect.Field;
import java.util.HashMap;

import org.jdom2.Element;

public class XMLField {
	
	
	private Class<?> declaringClass;
	private String name;
	private Element xml;
	private Field field;
	
	public static final String CLASS_KEY = "declaringclass";
	public static final String NAME_KEY = "name";
	
	
	public XMLField(Element fieldElement) {
		
		name = fieldElement.getAttributeValue(NAME_KEY);
		String className = fieldElement.getAttributeValue(CLASS_KEY);
		xml = fieldElement;
		
		try {
			declaringClass = Class.forName(className);
		}
		catch(ClassNotFoundException e) {
			
			throw new RuntimeException();
		}
		
	}
	
	
	
	public static boolean isField(Element objElement) {
		return objElement.getAttribute(NAME_KEY) != null &&
				objElement.getAttribute(CLASS_KEY) != null;

	}
	
	
	public Field construct() {
		try {
			return declaringClass.getDeclaredField(name);
		}
		catch(NoSuchFieldException e) {
			throw new RuntimeException();
		}
	}

	
	public void set(Object obj, HashMap<Integer, XMLMember> existing) {
		Element child = xml.getChildren().get(0);
		Object val;
		String text = child.getText();
		
		if(child.getName().equals("reference")) {
			Integer key = Integer.parseInt(text);
			val = existing.get(key).getObject();
		}
		else {
			val = PrimitiveConverter.getFromString(text);
		}
		
		
		
	}

}
